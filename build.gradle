ext {
    aGroup = 'jullill'
    aVersion = '0.0.1-SNAPSHOT'
}

//buildscript {
//    repositories {
//        mavenLocal()
//        maven {
//            url uri('../repo')
//        }
//    }
//
//    dependencies {
//        classpath group: 'org.github.julil', name: 'gradle-plugins', version: '1.0-SNAPSHOT'
//    }
//}
apply plugin: 'groovy'
apply plugin: IdeaToGradleConverterPlugin

dependencies {
    compile gradleApi()
    compile localGroovy()
}

class IdeaToGradleConverterPlugin implements Plugin<Project> {

    static def parseIdeaLibraries(ArrayList<File> libraries, Project project) {
        def result = [:]
        def projectPath = project.projectDir.absolutePath
        libraries.each {
            def rootTag = new XmlParser().parse(it)

            result += [(rootTag.library.@name.get(0)):
                               [
                                       'classesPath': replaceProjectPath(rootTag.library.CLASSES.root.@url, projectPath),
                                       'javaDocPath': replaceProjectPath(rootTag.library.JAVADOC.root.@url, projectPath),
                                       'sourcesPath': replaceProjectPath(rootTag.library.SOURCES.root.@url, projectPath)
                               ]
            ]
        }
        result
    }

    static def parseIdeaProjectModules(File ideaModuleFile, Project project) {
        def projectPath = project.projectDir.absolutePath
        def root = new XmlParser().parse(ideaModuleFile)
        root.find{ it.@name == 'ProjectModuleManager' }.collect{
            replaceProjectPath(it.module.@filepath, projectPath)
        }.first().collect { moduleImlPath ->
            File moduleImlFile = project.file(moduleImlPath)
            moduleImlFile
        }
    }

    static def replaceProjectPath(ArrayList<Path> path, String projectPath) {
        projectPath = projectPath.replace('\\', '/')
        path.collect {
            it.replaceAll('jar:\\/\\/', '').replaceAll('!\\/', '').replace('\$PROJECT_DIR\$', projectPath)
        }
    }

    static def generateBuildScript(File file, Map libraries, Project project) {
        File buildFile = new File(file.parent + "/build.gradle")
        def root = new XmlParser().parse(file)
//        root.component.orderEntry.find{
//            !it.library.@name.empty && it.library.@name.first().endsWith('Gradle: gwt-user')
//        }.collect {
//            it.SOURCES
//        }.each {
//            it.first().appendNode('root', ['url':'jar://$MODULE_DIR$/../../_lib/gwt-2.6.1/gwt-user.jar!/'])
//        }
//        println root
        def projectLibs = root.component.orderEntry.findAll { it.@type == "library" && it.@level == "project" }
        if (!projectLibs.isEmpty()) {
            def filesOutput = ""
            projectLibs.each {
                def libName = it.@name
                if (libraries.containsKey(libName)) {
                    def libPaths = libraries.get(libName)
                    libPaths['classesPath'].each {
                        filesOutput += "        '$it',\n"
                    }
                }
            }
            buildFile << """dependencies {
                            |   compile files(
                                    |$filesOutput
                            |   )
                            |}""".stripMargin()
        }
    }

    static def addNewProjectToGradle(String projectName, File gradleSettingsFile) {
        def importString = gradleSettingsFile.find { it.find("include '$projectName'") != null }
        if (importString == null) {
            gradleSettingsFile << "include '$projectName'\n"
        }
    }

    @Override
    void apply(Project project) {
        project.task('convertModule') << {
            def ideaProjectLibraries = parseIdeaLibraries(project.fileTree(dir: '.idea/libraries', include: '**/*.xml').findAll(), project)
            File gradleSettingsFile = project.file('settings.gradle')

            File ideaModuleFile = project.file('.idea/modules.xml')
            if (ideaModuleFile.exists()) {
                parseIdeaProjectModules(ideaModuleFile, project).each{ moduleIml ->
                    generateBuildScript(moduleIml, ideaProjectLibraries, project)
                    def newProjectName = moduleIml.name.replace('.iml', '')
                    addNewProjectToGradle(newProjectName, gradleSettingsFile)
                }
            }
//            project.projectDir.listFiles().each {
//                if (it.isDirectory()) {
//                    def files = it.listFiles()
//                    if (files.findAll { it.name.endsWith('build.gradle') }.empty) {
//                        def list = files.findAll { it.name.endsWith('.iml') }
//                        if (!list.empty) {
//                            def moduleIml = list.first()
//                            generateBuildScript(moduleIml, ideaProjectLibraries, project)
//                            def newProjectName = moduleIml.name.replace('.iml', '')
//                            addNewProjectToGradle(newProjectName, gradleSettingsFile)
//                        }
//                    }
//                }
//            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'maven'

    repositories {
        mavenCentral()
    }
}